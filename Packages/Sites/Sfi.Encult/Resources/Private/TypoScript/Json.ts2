prototype(Sfi.Encult:Json).@class = 'Sfi\\Encult\\TypoScriptObjects\\JsonImplementation'

json = TYPO3.TypoScript:Case {
	worldviews {
		condition = ${q(node).property('_name') == 'node-55afb944356ae'}
		type = 'Sfi.Encult:WorldviewsJson'
	}
	questions {
		condition = ${q(node).property('_name') == 'node-55afb779f1131'}
		type = 'Sfi.Encult:QuestionsJson'
	}
	answers {
		condition = ${q(node).is('[instanceof Sfi.Encult:Question]')}
		type = 'Sfi.Encult:AnswersJson'
	}
}

prototype(Sfi.Encult:JsonPage) < prototype(TYPO3.TypoScript:Http.Message) {
	httpResponseHead {
		headers.Content-Type = 'application/json;charset=utf-8'
	}
}




prototype(Sfi.Encult:WorldviewsJson) < prototype(Sfi.Encult:JsonPage) {
	content = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof Sfi.Encult:Worldview]').get()}
		itemRenderer = Sfi.Encult:WorldviewJson
		itemName = 'node'
		iterationName = 'iterator'
	}
	content.@process.1 = ${'{' + value + '}'}
	@cache {
		mode = 'cached'
		entryTags {
			1 = ${'NodeType_Sfi.Encult:Answer'}
		}
	}
}

prototype(Sfi.Encult:WorldviewJson) < prototype(Sfi.Encult:Json) {
	id = ${q(node).property('uriPathSegment')}
	title = ${String.stripTags(q(node).property('title'))}
	voteCount = ${q(site).find('[instanceof Sfi.Encult:Answer]').filterByReference('worldview', node).reduce('previousValue + currentValue.properties.voteCount', 0)}
	@process.1 = ${'"' + this.id + '": ' + value}
	@process.2 = ${iterator.isLast ? value : value + ','}
}




prototype(Sfi.Encult:QuestionsJson) < prototype(Sfi.Encult:JsonPage) {
	content = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof Sfi.Encult:Question]').get()}
		itemRenderer = Sfi.Encult:QuestionJson
		itemName = 'node'
		iterationName = 'iterator'
	}
	content.@process.1 = ${'{' + value + '}'}
	@cache {
		mode = 'cached'
		entryTags {
			1 = ${'DescendantOf_' + node.identifier}
		}
	}
}

prototype(Sfi.Encult:QuestionJson) < prototype(Sfi.Encult:Json) {
	id = ${q(node).property('uriPathSegment')}
	title = ${String.stripTags(q(node).property('title'))}
	subTitle = ${String.stripTags(q(node).property('subTitle'))}
	voteCount = ${String.toInteger(q(node).children('[instanceof Sfi.Encult:Answer]').reduce('previousValue + currentValue.properties.voteCount', 0))}
	answerWithMaxVotesIndex = ${q(node).children('[instanceof Sfi.Encult:Answer]').reduce('array[previousValue].properties.voteCount < array[index].properties.voteCount ? index : previousValue', 0)}
	answerWithMaxVotesCount = ${q(node).children('[instanceof Sfi.Encult:Answer]').get(this.answerWithMaxVotesIndex).properties.voteCount}
	worldviewWithMaxVotes = ${q(node).children('[instanceof Sfi.Encult:Answer]').get(this.answerWithMaxVotesIndex).properties.worldview.properties.title}
	@process.1 = ${'"' + this.id + '": ' + value}
	@process.2 = ${iterator.isLast ? value : value + ','}
}







prototype(Sfi.Encult:AnswersJson) < prototype(Sfi.Encult:JsonPage) {
	content = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof Sfi.Encult:Answer]').get()}
		itemRenderer = Sfi.Encult:AnswerJson
		itemName = 'node'
		iterationName = 'iterator'
	}
	content.@process.1 = ${'[' + value + ']'}
	@cache {
		mode = 'cached'
		entryTags {
			1 = ${'DescendantOf_' + node.identifier}
		}
	}
}

prototype(Sfi.Encult:AnswerJson) < prototype(Sfi.Encult:Json) {
	id = ${node.identifier}
	authorName = ${String.stripTags(q(node).property('authorName'))}
	authorTitle = ${String.stripTags(q(node).property('authorTitle'))}
	quizText = ${String.stripTags(q(node).property('quizText'))}
	fullVideo = ${q(node).property('fullVideo')}
	fullVideoThumb = ${q(node).property('fullVideoThumb')}
	fullText = ${String.stripTags(q(node).property('fullText'))}
	voteCount = ${String.toInteger(q(node).property('voteCount'))}
	worldviewId = ${q(node).property('worldview').properties.uriPathSegment}
	@process.1 = ${iterator.isLast ? value : value + ','}
}
